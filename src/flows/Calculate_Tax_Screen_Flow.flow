<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>51.0</apiVersion>
    <assignments>
        <name>Assign_Arrival_International</name>
        <label>Assign Arrival International</label>
        <locationX>537</locationX>
        <locationY>1126</locationY>
        <assignmentItems>
            <assignToReference>GetLeg.International_Fees__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Arriving_INTL_Tax.Tax_Fee__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>UpdateLeg</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_CA_Tax</name>
        <label>Assign CA Tax</label>
        <locationX>99</locationX>
        <locationY>1507</locationY>
        <assignmentItems>
            <assignToReference>GetLeg.CA_State_Tax__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>CATaxBothWays</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>UpdateLeg</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_CA_Tax_0</name>
        <label>Assign CA Tax</label>
        <locationX>363</locationX>
        <locationY>1066</locationY>
        <assignmentItems>
            <assignToReference>GetLeg.CA_State_Tax__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>CATaxFeeDeparting</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Is_Arrival_International</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_CA_Tax_0_0</name>
        <label>Assign CA Tax</label>
        <locationX>632</locationX>
        <locationY>1067</locationY>
        <assignmentItems>
            <assignToReference>GetLeg.CA_State_Tax__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>CATaxArriving</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Is_Departing_International</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_Departing_INTL</name>
        <label>Assign Departing INTL</label>
        <locationX>471</locationX>
        <locationY>976</locationY>
        <assignmentItems>
            <assignToReference>GetLeg.International_Fees__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Departing_INTL_Tax.Tax_Fee__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>UpdateLeg</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_INTL_Tax</name>
        <label>Assign INTL Tax</label>
        <locationX>355</locationX>
        <locationY>1422</locationY>
        <assignmentItems>
            <assignToReference>GetLeg.International_Fees__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Arriving_INTL_Tax.Tax_Fee__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>UpdateLeg</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_INTL_Tax_0</name>
        <label>Assign INTL Tax</label>
        <locationX>824</locationX>
        <locationY>1503</locationY>
        <assignmentItems>
            <assignToReference>GetLeg.International_Fees__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Departing_INTL_Tax.Tax_Fee__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>UpdateLeg</targetReference>
        </connector>
    </assignments>
    <decisions>
        <name>Calculate_Tax</name>
        <label>Calculate CA Tax?</label>
        <locationX>490</locationX>
        <locationY>708</locationY>
        <defaultConnector>
            <targetReference>Record_did_not_meet_criteria</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome - Do Nothing</defaultConnectorLabel>
        <rules>
            <name>Yes_Calculate_CA_Tax_Both_Ways</name>
            <conditionLogic>1 AND 2 AND 3 AND 4 AND (5 OR 6)</conditionLogic>
            <conditions>
                <leftValueReference>GetLeg.Departing_Airport__r.State__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>CA</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Arriving_Airport__r.State__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>CA</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Status__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Flown</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.RecordType.DeveloperName</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Leg</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Aircraft_Tail_Number__r.Name</leftValueReference>
                <operator>EndsWith</operator>
                <rightValue>
                    <stringValue>QS</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Aircraft_Tail_Number__r.Name</leftValueReference>
                <operator>EndsWith</operator>
                <rightValue>
                    <stringValue>FX</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Requested_Aircraft_Fee_Depart</targetReference>
            </connector>
            <label>Yes, Calculate CA Tax Both Ways</label>
        </rules>
        <rules>
            <name>Calculate_Tax_Departing_Only</name>
            <conditionLogic>1 AND 2 AND 3 AND 4 AND (5 OR 6)</conditionLogic>
            <conditions>
                <leftValueReference>GetLeg.Departing_Airport__r.State__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>CA</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Arriving_Airport__r.State__c</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>CA</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Status__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Flown</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.RecordType.DeveloperName</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Leg</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Aircraft_Tail_Number__r.Name</leftValueReference>
                <operator>EndsWith</operator>
                <rightValue>
                    <stringValue>QS</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Aircraft_Tail_Number__r.Name</leftValueReference>
                <operator>EndsWith</operator>
                <rightValue>
                    <stringValue>FX</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Requested_Aircraft_Fee_Depart_0</targetReference>
            </connector>
            <label>Calculate Tax Departing Only</label>
        </rules>
        <rules>
            <name>Calculate_Tax_Arriving_Only</name>
            <conditionLogic>1 AND 2 AND 3 AND 4 AND (5 OR 6)</conditionLogic>
            <conditions>
                <leftValueReference>GetLeg.Departing_Airport__r.State__c</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>CA</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Arriving_Airport__r.State__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>CA</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Status__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Flown</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.RecordType.DeveloperName</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Leg</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Aircraft_Tail_Number__r.Name</leftValueReference>
                <operator>EndsWith</operator>
                <rightValue>
                    <stringValue>QS</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Aircraft_Tail_Number__r.Name</leftValueReference>
                <operator>EndsWith</operator>
                <rightValue>
                    <stringValue>FX</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Requested_Aircraft_Fee_Arrive_0_0</targetReference>
            </connector>
            <label>Calculate Tax Arriving Only</label>
        </rules>
        <rules>
            <name>Not_CA_but_has_INTL</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetLeg.Departing_Airport__r.State__c</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>CA</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>Get_Arriving_INTL_Tax.Id</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue></stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>Get_Departing_INTL_Tax.Id</leftValueReference>
                <operator>EqualTo</operator>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Status__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Flown</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.RecordType.DeveloperName</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Leg</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Assign_Arrival_International</targetReference>
            </connector>
            <label>Not CA but has Arrival INTL</label>
        </rules>
        <rules>
            <name>Not_CA_but_Depart_INTL</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetLeg.Arriving_Airport__r.State__c</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>CA</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>Get_Departing_INTL_Tax.Id</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue></stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>Get_Arriving_INTL_Tax.Id</leftValueReference>
                <operator>EqualTo</operator>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.Status__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Flown</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetLeg.RecordType.DeveloperName</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Leg</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Assign_Departing_INTL</targetReference>
            </connector>
            <label>Not CA but Depart INTL</label>
        </rules>
    </decisions>
    <decisions>
        <name>Is_Arrival_International</name>
        <label>Is Arrival International?</label>
        <locationX>357</locationX>
        <locationY>1197</locationY>
        <defaultConnector>
            <targetReference>UpdateLeg</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Yes</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Arriving_INTL_Tax.Id</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue></stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Assign_INTL_Tax</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <name>Is_Departing_International</name>
        <label>Is Departing International?</label>
        <locationX>627</locationX>
        <locationY>1187</locationY>
        <defaultConnector>
            <targetReference>UpdateLeg</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Yes_0</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Departing_INTL_Tax.Id</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue></stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Assign_INTL_Tax_0</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <description>Added INTL Logic</description>
    <formulas>
        <name>CATaxArriving</name>
        <dataType>Currency</dataType>
        <expression>IF({!Requested_Aircraft_Fee_Arrive_0_0.Tax_Fee__c}&lt;{!Flown_Aircraft_Fee_Arrive_0_0.Tax_Fee__c},{!Requested_Aircraft_Fee_Arrive_0_0.Tax_Fee__c},{!Flown_Aircraft_Fee_Arrive_0_0.Tax_Fee__c})</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>CATaxBothWays</name>
        <dataType>Currency</dataType>
        <expression>IF({!Requested_Aircraft_Fee_Depart.Tax_Fee__c}&lt;{!Flown_Aircraft_Fee_Depart.Tax_Fee__c},{!Requested_Aircraft_Fee_Depart.Tax_Fee__c},{!Flown_Aircraft_Fee_Depart.Tax_Fee__c})+IF({!Requested_Aircraft_Fee_Arrive.Tax_Fee__c}&lt;{!Flown_Aircraft_Fee_Arrive.Tax_Fee__c},{!Requested_Aircraft_Fee_Arrive.Tax_Fee__c},{!Flown_Aircraft_Fee_Arrive.Tax_Fee__c})</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>CATaxFeeDeparting</name>
        <dataType>Currency</dataType>
        <expression>IF({!Requested_Aircraft_Fee_Depart_0.Tax_Fee__c}&lt;{!Flown_Aircraft_Fee_Depart_0.Tax_Fee__c},{!Requested_Aircraft_Fee_Depart_0.Tax_Fee__c},{!Flown_Aircraft_Fee_Depart_0.Tax_Fee__c})</expression>
        <scale>2</scale>
    </formulas>
    <interviewLabel>Calculate Tax Screen Flow {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Calculate Tax Screen Flow</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>FREE_FORM_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Flow</processType>
    <recordLookups>
        <name>Flown_Aircraft_Fee_Arrive</name>
        <label>Flown Aircraft Fee Arrive</label>
        <locationX>103</locationX>
        <locationY>1166</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Assign_CA_Tax</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Aircraft_Type_Formula__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Aircraft_Type_Formula__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>State_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>CA</stringValue>
            </value>
        </filters>
        <filters>
            <field>Operator_Name__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetOperator.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Airport_Fee_Lookup__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Flown_Aircraft_Fee_Arrive_0_0</name>
        <label>Flown Aircraft Fee Arrive</label>
        <locationX>631</locationX>
        <locationY>926</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Assign_CA_Tax_0_0</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Aircraft_Type_Formula__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Aircraft_Type_Formula__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>State_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>CA</stringValue>
            </value>
        </filters>
        <filters>
            <field>Operator_Name__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetOperator.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Airport_Fee_Lookup__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Flown_Aircraft_Fee_Depart</name>
        <label>Flown Aircraft Fee Depart</label>
        <locationX>103</locationX>
        <locationY>926</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Requested_Aircraft_Fee_Arrive</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Aircraft_Type_Formula__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Aircraft_Type_Formula__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>State_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>CA</stringValue>
            </value>
        </filters>
        <filters>
            <field>Operator_Name__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetOperator.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Airport_Fee_Lookup__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Flown_Aircraft_Fee_Depart_0</name>
        <label>Flown Aircraft Fee Depart</label>
        <locationX>367</locationX>
        <locationY>926</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Assign_CA_Tax_0</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Aircraft_Type_Formula__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Aircraft_Type_Formula__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>State_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>CA</stringValue>
            </value>
        </filters>
        <filters>
            <field>Operator_Name__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetOperator.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Airport_Fee_Lookup__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_Arriving_INTL_Tax</name>
        <label>Get Arriving INTL Tax</label>
        <locationX>498</locationX>
        <locationY>569</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Calculate_Tax</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Operator_Name__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Operator_Name__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>Aircraft_Type_Formula__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Aircraft_Type_Formula__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>Airport_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Arriving_Airport__r.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Airport_Fee_Lookup__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_Departing_INTL_Tax</name>
        <label>Get Departing INTL Tax</label>
        <locationX>497</locationX>
        <locationY>415</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_Arriving_INTL_Tax</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Operator_Name__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Operator_Name__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>Aircraft_Type_Formula__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Aircraft_Type_Formula__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>Airport_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Departing_Airport__r.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Airport_Fee_Lookup__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetLeg</name>
        <label>GetLeg</label>
        <locationX>499</locationX>
        <locationY>171</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>GetOperator</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Leg__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetOperator</name>
        <label>GetOperator</label>
        <locationX>498</locationX>
        <locationY>282</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_Departing_INTL_Tax</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Client_Program__r.Operator_Program__r.Operator__r.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Account</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Requested_Aircraft_Fee_Arrive</name>
        <label>Requested Aircraft Fee Arrive</label>
        <locationX>103</locationX>
        <locationY>1046</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Flown_Aircraft_Fee_Arrive</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Aircraft_Type_Formula__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Aircraft_Requested_Formula__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>State_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>CA</stringValue>
            </value>
        </filters>
        <filters>
            <field>Operator_Name__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetOperator.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Airport_Fee_Lookup__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Requested_Aircraft_Fee_Arrive_0_0</name>
        <label>Requested Aircraft Fee Arrive</label>
        <locationX>631</locationX>
        <locationY>806</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Flown_Aircraft_Fee_Arrive_0_0</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Aircraft_Type_Formula__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Aircraft_Requested_Formula__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>State_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>CA</stringValue>
            </value>
        </filters>
        <filters>
            <field>Operator_Name__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetOperator.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Airport_Fee_Lookup__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Requested_Aircraft_Fee_Depart</name>
        <label>Requested Aircraft Fee Depart</label>
        <locationX>103</locationX>
        <locationY>806</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Flown_Aircraft_Fee_Depart</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Aircraft_Type_Formula__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Aircraft_Requested_Formula__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>State_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>CA</stringValue>
            </value>
        </filters>
        <filters>
            <field>Operator_Name__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetOperator.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Airport_Fee_Lookup__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Requested_Aircraft_Fee_Depart_0</name>
        <label>Requested Aircraft Fee Depart</label>
        <locationX>367</locationX>
        <locationY>806</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Flown_Aircraft_Fee_Depart_0</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Aircraft_Type_Formula__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetLeg.Aircraft_Requested_Formula__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>State_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>CA</stringValue>
            </value>
        </filters>
        <filters>
            <field>Operator_Name__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetOperator.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Airport_Fee_Lookup__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <name>UpdateLeg</name>
        <label>UpdateLeg</label>
        <locationX>500</locationX>
        <locationY>1502</locationY>
        <connector>
            <targetReference>CA_Tax_Updated</targetReference>
        </connector>
        <inputReference>GetLeg</inputReference>
    </recordUpdates>
    <screens>
        <name>CA_Tax_Updated</name>
        <label>CA Tax Updated</label>
        <locationX>500</locationX>
        <locationY>1667</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <fields>
            <name>CAStateTax</name>
            <fieldText>&lt;p&gt;CA Tax has been updated to:&lt;/p&gt;&lt;p&gt;{!GetLeg.CA_State_Tax__c}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;International Taxes:&lt;/p&gt;&lt;p&gt;{!GetLeg.International_Fees__c}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>Record_did_not_meet_criteria</name>
        <label>Record did not meet criteria</label>
        <locationX>895</locationX>
        <locationY>806</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <fields>
            <name>Status</name>
            <fieldText>&lt;p&gt;Record does not meet criteria to automate updating the tax. &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Record must be NetJets or FlexJet, and have either departing or arriving airport in CA.&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <start>
        <locationX>374</locationX>
        <locationY>47</locationY>
        <connector>
            <targetReference>GetLeg</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <variables>
        <name>recordId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
